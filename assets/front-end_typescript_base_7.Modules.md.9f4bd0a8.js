import{_ as s,o as a,c as n,Q as p}from"./chunks/framework.9bc09dc8.js";const m=JSON.parse('{"title":"Modules","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/typescript/base/7.Modules.md","filePath":"front-end/typescript/base/7.Modules.md","lastUpdated":1690100584000}'),l={name:"front-end/typescript/base/7.Modules.md"},o=p(`<h1 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-label="Permalink to &quot;Modules&quot;">​</a></h1><p>JavaScript 此前拥有多种处理模块化代码的方法。TypeScript 自 2012 年问世以来，已经实现了对许多这些格式的支持，但随着时间的推移，社区和 JavaScript 规范已经融合到一种称为 ES 模块（或 ES6 模块）的格式上，即<code>export/import</code>语法。</p><p>ES 模块于 2015 年被添加到 JavaScript 规范中，到 2020 年在大多数 web 浏览器和 JavaScript 运行时中得到了广泛支持。</p><p>本手册将重点介绍 ES 模块及在其之前流行的 CommonJS 模块，即<code>exports=</code>语法。</p><h2 id="如何定义-js-中的模块" tabindex="-1">如何定义 JS 中的模块 <a class="header-anchor" href="#如何定义-js-中的模块" aria-label="Permalink to &quot;如何定义 JS 中的模块&quot;">​</a></h2><p>在 TS 中，和 ES6 中一样，拥有一个顶层的<code>import</code>或者<code>export</code>的任意文件都将被视为模块。</p><p>相反的，没有任何顶级导入或导出声明的文件被视为全局脚本，其内容在全局范围内可用（因此也适用于模块）。</p><p>模块在其单独的作用域内执行，而不是在全局。这意味着在模块中声明的变量、函数、类等在模块外部不可见，除非使用其中一个导出形式显式导出。相反，要使用从不同模块导出的变量、函数、类、接口等，必须使用导入形式之一导入。</p><p>在开始之前，了解 TypeScript 将模块视为什么很重要。</p><p>在非模块脚本文件内部，变量和类型被声明为在共享全局范围内，并且假设您将使用 outFile 编译器选项将多个输入文件连接到一个输出文件中，或者使用 HTML 中的多个＜ script ＞标记来加载这些文件（以正确的顺序！）。</p><p>如果您的文件当前没有任何导入或导出，但您希望将其视为模块，请添加以下行：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> {}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> {}</span></span></code></pre></div><p>这会将文件转化为一个没有导出任何东西的模块。这种语法作用于任意模块类型。</p><h2 id="ts-中的模块" tabindex="-1">TS 中的模块 <a class="header-anchor" href="#ts-中的模块" aria-label="Permalink to &quot;TS 中的模块&quot;">​</a></h2><p>在 TS 中使用模块之前首先要思考三件事：</p><ul><li>**语法：**我想使用那种模块语法？</li><li>**模块解析：**模块名称或路径与真实磁盘文件的关系如何？</li><li>**模块输出目标：**编译后的 JS 模块标准是哪种？</li></ul><h3 id="es-module-语法" tabindex="-1">ES Module 语法 <a class="header-anchor" href="#es-module-语法" aria-label="Permalink to &quot;ES Module 语法&quot;">​</a></h3><p>略</p><h4 id="ts-中的特殊语法" tabindex="-1">TS 中的特殊语法 <a class="header-anchor" href="#ts-中的特殊语法" aria-label="Permalink to &quot;TS 中的特殊语法&quot;">​</a></h4><p>类型可以像 JS 中的值一样使用导入导出语法：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// @filename: animal.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">breed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">yearOfBirth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">interface</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> {</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">breeds</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[]</span></span>
<span class="line"><span style="color:#E1E4E8;">  </span><span style="color:#FFAB70;">yearOfBirth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: app.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { Cat, Dog } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./animal.js&#39;</span></span>
<span class="line"><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animals</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @filename: animal.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">breed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">yearOfBirth</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">interface</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> {</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">breeds</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[]</span></span>
<span class="line"><span style="color:#24292E;">  </span><span style="color:#E36209;">yearOfBirth</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: app.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { Cat, Dog } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./animal.js&#39;</span></span>
<span class="line"><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animals</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span></span></code></pre></div><p>TypeScript 使用两个概念扩展了导入语法，用于声明类型的导入：</p><h5 id="import-type" tabindex="-1">import type <a class="header-anchor" href="#import-type" aria-label="Permalink to &quot;import type&quot;">​</a></h5><p>值可以导入类型：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// @filename: animal.ts</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">breed</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">; </span><span style="color:#FFAB70;">yearOfBirth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#9ECBFF;">&#39;createCatName&#39;</span><span style="color:#E1E4E8;"> cannot be used </span><span style="color:#F97583;">as</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">value</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">because</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">it</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">was</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">imported</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">using</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;import type&#39;</span><span style="color:#E1E4E8;">.</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> { </span><span style="color:#FFAB70;">breeds</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">string</span><span style="color:#E1E4E8;">[]; </span><span style="color:#FFAB70;">yearOfBirth</span><span style="color:#F97583;">:</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">number</span><span style="color:#E1E4E8;"> };</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCatName</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> () </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;fluffy&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: valid.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { Cat, Dog } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./animal.js&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animals</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: app.ts</span></span>
<span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> { createCatName } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&quot;./animal.js&quot;</span><span style="color:#E1E4E8;">;</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCatName</span><span style="color:#E1E4E8;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Error! &#39;createCatName&#39; cannot be used as a value because it was imported using &#39;import type&#39;.</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// @filename: animal.ts</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">breed</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">; </span><span style="color:#E36209;">yearOfBirth</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#032F62;">&#39;createCatName&#39;</span><span style="color:#24292E;"> cannot be used </span><span style="color:#D73A49;">as</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">a</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">value</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">because</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">it</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">was</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">imported</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">using</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;import type&#39;</span><span style="color:#24292E;">.</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> { </span><span style="color:#E36209;">breeds</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">string</span><span style="color:#24292E;">[]; </span><span style="color:#E36209;">yearOfBirth</span><span style="color:#D73A49;">:</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">number</span><span style="color:#24292E;"> };</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCatName</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> () </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;fluffy&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: valid.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { Cat, Dog } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./animal.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animals</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span><span style="color:#24292E;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// @filename: app.ts</span></span>
<span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> { createCatName } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&quot;./animal.js&quot;</span><span style="color:#24292E;">;</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCatName</span><span style="color:#24292E;">();</span></span>
<span class="line"><span style="color:#6A737D;">// Error! &#39;createCatName&#39; cannot be used as a value because it was imported using &#39;import type&#39;.</span></span></code></pre></div><p>TS4.5 中支持内联式的声明 type 导入：</p><div class="language-typescript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">import</span><span style="color:#E1E4E8;"> { createCatName, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> Cat, </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> Dog } </span><span style="color:#F97583;">from</span><span style="color:#E1E4E8;"> </span><span style="color:#9ECBFF;">&#39;./animal.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F97583;">export</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">type</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Animals</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Cat</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">|</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Dog</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">name</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">createCatName</span><span style="color:#E1E4E8;">()</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">import</span><span style="color:#24292E;"> { createCatName, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> Cat, </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> Dog } </span><span style="color:#D73A49;">from</span><span style="color:#24292E;"> </span><span style="color:#032F62;">&#39;./animal.js&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D73A49;">export</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">type</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Animals</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Cat</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">|</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Dog</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">name</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">createCatName</span><span style="color:#24292E;">()</span></span></code></pre></div><p>这使像 Babel、swc 或 esbuild 这样的非 TypeScript 转译器知道可以安全地删除哪些导入。</p><h3 id="common-js" tabindex="-1">Common Js <a class="header-anchor" href="#common-js" aria-label="Permalink to &quot;Common Js&quot;">​</a></h3><p>略</p><h2 id="typescript-的模块解析选项" tabindex="-1">TypeScript 的模块解析选项 <a class="header-anchor" href="#typescript-的模块解析选项" aria-label="Permalink to &quot;TypeScript 的模块解析选项&quot;">​</a></h2><p>模块解析是从 import 或 require 语句中获取字符串，并确定该字符串所指的文件的过程。</p><p>TypeScript 包括两种解析策略：Classic and Node。Classic 是编译器选项模块不是 commonjs 时的默认值，它是为了向后兼容而包含的。Node 策略复制 Node.js 在 CommonJS 模式下的工作方式，并对.ts 和.d.ts 进行额外检查。</p><p>TypeScript 中有许多影响模块策略的 TSConfig 标志：<code>moduleResolution、baseUrl、path和rootDirs</code>。</p><p>有关这些策略如何工作的详细信息，请参阅<a href="https://www.typescriptlang.org/docs/handbook/module-resolution.html" target="_blank" rel="noreferrer">模块解决方案</a>。</p><h2 id="typescript-的模块输出选项" tabindex="-1">TypeScript 的模块输出选项 <a class="header-anchor" href="#typescript-的模块输出选项" aria-label="Permalink to &quot;TypeScript 的模块输出选项&quot;">​</a></h2><p>有两个选项会影响发出的 JavaScript 输出：</p><ul><li><p><code>target</code>，确定哪些 JS 功能被降级（转换为在较旧的 JavaScript 运行时中运行），哪些功能保持不变</p></li><li><p><code>module</code>，用于确定模块之间交互所使用的代码</p></li></ul><p><code>target</code>由希望使用的 JavaScript 运行时决定。例如最旧的 web 浏览器，Node 的最低版本，或者可能来自运行时的独特约束，例如 Electron。</p><p>编译器选项<code>module</code>决定使用哪种模块加载器。在运行时，模块加载器负责在执行模块之前查找并执行模块的所有依赖项。</p><h2 id="命名空间" tabindex="-1">命名空间 <a class="header-anchor" href="#命名空间" aria-label="Permalink to &quot;命名空间&quot;">​</a></h2><p>TypeScript 有自己的模块格式，称为命名空间，早于 ES Module 标准。这种语法在创建复杂的定义文件时有很多有用的功能，并且在<a href="https://www.typescriptlang.org/dt/" target="_blank" rel="noreferrer">DefinelyType</a>中仍然可以使用。</p><p>虽然没有被弃用，但名称空间中的大多数功能都存在于 ES 模块中，我们建议您使用这些功能来与 JavaScript 的方向保持一致。详情见<a href="https://www.typescriptlang.org/docs/handbook/namespaces.html" target="_blank" rel="noreferrer">命名空间</a>。</p>`,43),e=[o];function t(r,c,y,E,i,d){return a(),n("div",null,e)}const u=s(l,[["render",t]]);export{m as __pageData,u as default};
