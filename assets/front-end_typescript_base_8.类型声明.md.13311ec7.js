import{_ as s,o as a,c as n,Q as o}from"./chunks/framework.9bc09dc8.js";const h=JSON.parse('{"title":"类型声明","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/typescript/base/8.类型声明.md","filePath":"front-end/typescript/base/8.类型声明.md","lastUpdated":1690100584000}'),p={name:"front-end/typescript/base/8.类型声明.md"},e=o(`<h1 id="类型声明" tabindex="-1">类型声明 <a class="header-anchor" href="#类型声明" aria-label="Permalink to &quot;类型声明&quot;">​</a></h1><h2 id="types" tabindex="-1">@Types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;@Types&quot;">​</a></h2><p>在 Typescript 2.0 之后，TypeScript 将会默认的查看 ./node_modules/@types 文件夹，自动从这里来获取模块的类型定义，当然了，你需要独立安装这个类型定义。Microsoft 在  The Future of Declaration Files  介绍了 TypeScript 的这个新特性。</p><p>默认情况下，所有的 @types 包都会在编译时应用，任意层的 node_modules/@types 都会被使用，进一步说，在  ./node_modules/@types/ , ../node_modules/@types/, ../../node_modules/@types/ 都被应用。如果你的类型定义不在这个文件夹中，可以使用 typesRoot 来配置，只有在 typeRoots 中的包才会被包含，配置如下：</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">&quot;typeRoots&quot;</span><span style="color:#E1E4E8;"> : [</span><span style="color:#9ECBFF;">&quot;./typings&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">&quot;typeRoots&quot;</span><span style="color:#24292E;"> : [</span><span style="color:#032F62;">&quot;./typings&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>现在，只有在 ./typings 中的才会应用，而 ./node_modules/@types 中的则不会。 如果配置了 types，则只有列出的包才会包含。</p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">{</span></span>
<span class="line"><span style="color:#E1E4E8;">   </span><span style="color:#79B8FF;">&quot;compilerOptions&quot;</span><span style="color:#E1E4E8;">: {</span></span>
<span class="line"><span style="color:#E1E4E8;">       </span><span style="color:#79B8FF;">&quot;types&quot;</span><span style="color:#E1E4E8;"> : [</span><span style="color:#9ECBFF;">&quot;node&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;lodash&quot;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&quot;express&quot;</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">   }</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">{</span></span>
<span class="line"><span style="color:#24292E;">   </span><span style="color:#005CC5;">&quot;compilerOptions&quot;</span><span style="color:#24292E;">: {</span></span>
<span class="line"><span style="color:#24292E;">       </span><span style="color:#005CC5;">&quot;types&quot;</span><span style="color:#24292E;"> : [</span><span style="color:#032F62;">&quot;node&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;lodash&quot;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&quot;express&quot;</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">   }</span></span>
<span class="line"><span style="color:#24292E;">}</span></span></code></pre></div><p>这样将只会包含 ./node_modules/@types/node, ./node_modules/@types/lodash 和 ./node_modules/@types/express ，其它的则不会被包含进来。如果配置为&quot;types&quot;: []则不会包含任何包。</p><h2 id="d-ts" tabindex="-1">*.d.ts <a class="header-anchor" href="#d-ts" aria-label="Permalink to &quot;*.d.ts&quot;">​</a></h2><h3 id="和-types的关系" tabindex="-1">和@types的关系 <a class="header-anchor" href="#和-types的关系" aria-label="Permalink to &quot;和@types的关系&quot;">​</a></h3><p>@types是npm的一个分支，用来存放*.d.ts文件，如果对应的npm包存放在@types中，要使用必须下载！如果是自己本地的*.d.ts申明文件，则和@types没有任何关系！</p><h3 id="编写" tabindex="-1">编写 <a class="header-anchor" href="#编写" aria-label="Permalink to &quot;编写&quot;">​</a></h3>`,12),t=[e];function l(c,r,i,y,d,E){return a(),n("div",null,t)}const q=s(p,[["render",l]]);export{h as __pageData,q as default};
