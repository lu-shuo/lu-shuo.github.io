import{_ as s,o as a,c as l,Q as n}from"./chunks/framework.9bc09dc8.js";const A=JSON.parse('{"title":"Array","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/javascript/base/1.数组.md","filePath":"front-end/javascript/base/1.数组.md","lastUpdated":1695089740000}'),o={name:"front-end/javascript/base/1.数组.md"},e=n(`<h1 id="array" tabindex="-1">Array <a class="header-anchor" href="#array" aria-label="Permalink to &quot;Array&quot;">​</a></h1><p>Array 对象支持在单个变量名下存储多个元素，并提供诸多操作成员的方法。 在实现层面，JavaScript 实际上是将数组元素作为标准的对象属性来存储，把数组索引作为属性名。</p><h2 id="常用静态方法" tabindex="-1">常用静态方法 <a class="header-anchor" href="#常用静态方法" aria-label="Permalink to &quot;常用静态方法&quot;">​</a></h2><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noreferrer">Array.from()</a> 从数组类对象或可迭代对象创建一个新的 Array 实例。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/isArray" target="_blank" rel="noreferrer">Array.isArray()</a> 如果参数是数组则返回 true ，否则返回 false 。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of" target="_blank" rel="noreferrer">Array.of()</a> 创建一个新的 Array 实例，具有可变数量的参数，而不管参数的数量或类型。</li></ul><h2 id="常用实例方法" tabindex="-1">常用实例方法 <a class="header-anchor" href="#常用实例方法" aria-label="Permalink to &quot;常用实例方法&quot;">​</a></h2><h3 id="修改自身的方法" tabindex="-1">修改自身的方法 <a class="header-anchor" href="#修改自身的方法" aria-label="Permalink to &quot;修改自身的方法&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/unshift" target="_blank" rel="noreferrer">Array.prototype.unshift()</a> 在数组的前面添加一个或多个元素，并返回数组新的 length。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/shift" target="_blank" rel="noreferrer">Array.prototype.shift()</a> 从数组中移除第一个元素并返回该元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/pop" target="_blank" rel="noreferrer">Array.prototype.pop()</a> 从数组中移除最后一个元素并返回该元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noreferrer">Array.prototype.push()</a> 在数组末尾添加一个或多个元素，并返回数组新的 length。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/splice" target="_blank" rel="noreferrer">Array.prototype.splice()</a> 从数组中添加和/或删除元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/fill" target="_blank" rel="noreferrer">Array.prototype.fill()</a> 用静态值填充数组中从开始索引到结束索引的所有元素。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/copyWithin" target="_blank" rel="noreferrer">Array.prototype.copyWithin()</a> 浅复制数组的一部分到同一数组中的另一个位置，并返回它，不会改变原数组的长度。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reverse" target="_blank" rel="noreferrer">Array.prototype.reverse()</a> 反转数组中元素的顺序。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/sort" target="_blank" rel="noreferrer">Array.prototype.sort()</a> 对数组的元素进行排序并返回该数组。</li></ul><h3 id="不修改自身的方法" tabindex="-1">不修改自身的方法 <a class="header-anchor" href="#不修改自身的方法" aria-label="Permalink to &quot;不修改自身的方法&quot;">​</a></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/at" target="_blank" rel="noreferrer">Array.prototype.at()</a> 返回给定索引处的数组元素。接受从最后一项往回计算的负整数，在取数组的后几位元素时很简洁方便。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noreferrer">Array.prototype.concat()</a> 返回一个新数组，该数组由被调用的数组与其他数组或值连接形成。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/join" target="_blank" rel="noreferrer">Array.prototype.join()</a> 将数组的所有元素通过指定连接符连接为字符串。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/slice" target="_blank" rel="noreferrer">Array.prototype.slice()</a> 提取调用数组的一部分并返回一个新数组。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/includes" target="_blank" rel="noreferrer">Array.prototype.includes()</a> 确定调用数组是否包含一个值，根据情况返回 true 或 false。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/find" target="_blank" rel="noreferrer">Array.prototype.find()</a> 返回数组中满足提供的测试函数的第一个元素的值，如果没有找到合适的元素，则返回 undefined。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findIndex" target="_blank" rel="noreferrer">Array.prototype.findIndex()</a> 返回数组中满足提供的测试函数的第一个元素的索引，如果没有找到合适的元素，则返回 -1。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLast" target="_blank" rel="noreferrer">Array.prototype.findLast()</a> 返回数组中满足提供的测试函数的最后一个元素的值，如果没有找到合适的元素，则返回 undefined。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/findLastIndex" target="_blank" rel="noreferrer">Array.prototype.findLastIndex()</a> 返回数组中满足所提供测试函数的最后一个元素的索引，如果没有找到合适的元素，则返回 -1。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/indexOf" target="_blank" rel="noreferrer">Array.prototype.indexOf()</a> 返回在调用数组中可以找到给定元素的第一个（最小）索引。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/lastIndexOf" target="_blank" rel="noreferrer">Array.prototype.lastIndexOf()</a> 返回在调用数组中可以找到给定元素的最后一个（最大）索引，如果找不到则返回 -1。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach" target="_blank" rel="noreferrer">Array.prototype.forEach()</a> 对调用数组中的每个元素调用给定的函数。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/map" target="_blank" rel="noreferrer">Array.prototype.map()</a> 返回一个新数组，其中包含对调用数组中的每个元素调用函数的结果。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce" target="_blank" rel="noreferrer">Array.prototype.reduce()</a> 对数组的每个元素（从左到右）执行用户提供的“reducer”回调函数，将其简化为单个值。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/reduceRight" target="_blank" rel="noreferrer">Array.prototype.reduceRight()</a> 对数组的每个元素（从右到左）执行用户提供的“reducer”回调函数，将其简化为单个值。</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/some" target="_blank" rel="noreferrer">Array.prototype.some()</a> 如果调用数组中至少有一个元素满足提供的测试函数，则返回 true。</li></ul><h2 id="创建数组" tabindex="-1">创建数组 <a class="header-anchor" href="#创建数组" aria-label="Permalink to &quot;创建数组&quot;">​</a></h2><h3 id="字面量" tabindex="-1">字面量 <a class="header-anchor" href="#字面量" aria-label="Permalink to &quot;字面量&quot;">​</a></h3><p>最常用，也是最推荐使用的方式。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr3</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [element0, element1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#E1E4E8;"> elementN]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr3</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [element0, element1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#24292E;"> elementN]</span></span></code></pre></div><h3 id="构造函数" tabindex="-1">构造函数 <a class="header-anchor" href="#构造函数" aria-label="Permalink to &quot;构造函数&quot;">​</a></h3><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr1</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(element0, element1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#E1E4E8;"> elementN)</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">arr2</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 创建指定长度的空数组</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr1</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(element0, element1, </span><span style="color:#6A737D;">/* … ,*/</span><span style="color:#24292E;"> elementN)</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">arr2</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 创建指定长度的空数组</span></span></code></pre></div><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>调用 Array() 时可以使用或不使用 new。两者都会创建一个新的 Array 实例。 Array(N)中 n 必须为整数，否则会抛出 RangeError: Invalid array length 错误。</p></div><p>使用构造函数创建数组在只有一个参数的情况下，参数的类型不同会表现出不同的行为：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [empty*3]</span></span>
<span class="line"><span style="color:#F97583;">new</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;3&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [&#39;3&#39;]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [empty*3]</span></span>
<span class="line"><span style="color:#D73A49;">new</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;3&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [&#39;3&#39;]</span></span></code></pre></div><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>构造函数方式容易创建稀疏数组，不推荐使用。</p></div><h3 id="array-of" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of" target="_blank" rel="noreferrer">Array.of()</a> <a class="header-anchor" href="#array-of" aria-label="Permalink to &quot;[Array.of()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/of)&quot;">​</a></h3><p><code>Array.of()</code> 静态方法通过可变数量的参数创建一个新的 Array 实例，而不考虑参数的数量或类型。 它与构造函数方式之间的区别在于对单个参数的处理：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [7]</span></span>
<span class="line"><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">7</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// 由 7 个空槽组成的数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">of</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [7]</span></span>
<span class="line"><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">7</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// 由 7 个空槽组成的数组</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">of</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [1, 2, 3]</span></span>
<span class="line"><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [1, 2, 3]</span></span></code></pre></div><p><code>of</code>方法可以在任何接受一个 len 参数表示新数组长度的构造函数上调用：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">NotArray</span><span style="color:#E1E4E8;">(</span><span style="color:#FFAB70;">len</span><span style="color:#E1E4E8;">) {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;NotArray called with length&#39;</span><span style="color:#E1E4E8;">, len)</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.of.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(NotArray, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">// NotArray called with length 3</span></span>
<span class="line"><span style="color:#6A737D;">// NotArray { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, length: 3 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.of.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(Object)) </span><span style="color:#6A737D;">// [Number: 0] { length: 0 }</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">NotArray</span><span style="color:#24292E;">(</span><span style="color:#E36209;">len</span><span style="color:#24292E;">) {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;NotArray called with length&#39;</span><span style="color:#24292E;">, len)</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.of.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(NotArray, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// NotArray called with length 3</span></span>
<span class="line"><span style="color:#6A737D;">// NotArray { &#39;0&#39;: 1, &#39;1&#39;: 2, &#39;2&#39;: 3, length: 3 }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.of.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(Object)) </span><span style="color:#6A737D;">// [Number: 0] { length: 0 }</span></span></code></pre></div><p>当调用<code>of</code>方法时的<code>this</code>不是构造函数时，返回一个普通<code>Array</code>对象：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.of.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">({}, </span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">)) </span><span style="color:#6A737D;">// [ 1 ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.of.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">({}, </span><span style="color:#005CC5;">1</span><span style="color:#24292E;">)) </span><span style="color:#6A737D;">// [ 1 ]</span></span></code></pre></div><h3 id="array-from" tabindex="-1"><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noreferrer">Array.from()</a> <a class="header-anchor" href="#array-from" aria-label="Permalink to &quot;[Array.from()](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/from)&quot;">​</a></h3><p>从可迭代或类数组对象创建一个新的浅拷贝的数组实例。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Array.from(arrayLike, mapFn?, thisArg?)</span></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;foo&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">([</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">], (</span><span style="color:#FFAB70;">x</span><span style="color:#E1E4E8;">) </span><span style="color:#F97583;">=&gt;</span><span style="color:#E1E4E8;"> x </span><span style="color:#F97583;">+</span><span style="color:#E1E4E8;"> x))</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: Array [2, 4, 6]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Array.from(arrayLike, mapFn?, thisArg?)</span></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;foo&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: Array [&quot;f&quot;, &quot;o&quot;, &quot;o&quot;]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">([</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">], (</span><span style="color:#E36209;">x</span><span style="color:#24292E;">) </span><span style="color:#D73A49;">=&gt;</span><span style="color:#24292E;"> x </span><span style="color:#D73A49;">+</span><span style="color:#24292E;"> x))</span></span>
<span class="line"><span style="color:#6A737D;">// Expected output: Array [2, 4, 6]</span></span></code></pre></div><h2 id="创建指定长度的-undefined-数组-非稀疏数组-的常用方法" tabindex="-1">创建指定长度的 undefined 数组（非稀疏数组）的常用方法 <a class="header-anchor" href="#创建指定长度的-undefined-数组-非稀疏数组-的常用方法" aria-label="Permalink to &quot;创建指定长度的 undefined 数组（非稀疏数组）的常用方法&quot;">​</a></h2><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">({length: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">[</span><span style="color:#F97583;">...</span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">)] </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">Array.</span><span style="color:#B392F0;">apply</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">null</span><span style="color:#E1E4E8;">, {length: </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">}) </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">({length: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}) </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">[</span><span style="color:#D73A49;">...</span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">3</span><span style="color:#24292E;">)] </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">Array.</span><span style="color:#6F42C1;">apply</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">null</span><span style="color:#24292E;">, {length: </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">}) </span><span style="color:#6A737D;">// [undefined, undefined, undefined]</span></span></code></pre></div><p>推荐使用<code>Array.from()</code>或者扩展运算符。</p><h2 id="稀疏数组" tabindex="-1">稀疏数组 <a class="header-anchor" href="#稀疏数组" aria-label="Permalink to &quot;稀疏数组&quot;">​</a></h2><p>包含“空槽”属性的数组被称为稀疏数组，这与用<code>undefined</code>填充的槽不同。 它会在以下情况下创建：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#6A737D;">// Array 构造函数：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">a</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">Array</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// [ &lt;5 empty items&gt; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数组字面量中的连续逗号：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">b</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, , , </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// [ 1, 2, &lt;2 empty items&gt;, 5 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接给大于 array.length 的索引设置值以形成空槽：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">c</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">c[</span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">] </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// [ 1, 2, &lt;2 empty items&gt;, 5 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过直接设置 .length 拉长一个数组：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">d</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#E1E4E8;">d.</span><span style="color:#79B8FF;">length</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;"> </span><span style="color:#6A737D;">// [ 1, 2, &lt;3 empty items&gt; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除一个元素：</span></span>
<span class="line"><span style="color:#F97583;">const</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">e</span><span style="color:#E1E4E8;"> </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#79B8FF;">1</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">3</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">4</span><span style="color:#E1E4E8;">, </span><span style="color:#79B8FF;">5</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"><span style="color:#F97583;">delete</span><span style="color:#E1E4E8;"> e[</span><span style="color:#79B8FF;">2</span><span style="color:#E1E4E8;">] </span><span style="color:#6A737D;">// [ 1, 2, &lt;1 empty item&gt;, 4, 5 ]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#6A737D;">// Array 构造函数：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">a</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">Array</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">5</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// [ &lt;5 empty items&gt; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 数组字面量中的连续逗号：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">b</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, , , </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// [ 1, 2, &lt;2 empty items&gt;, 5 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 直接给大于 array.length 的索引设置值以形成空槽：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">c</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">c[</span><span style="color:#005CC5;">4</span><span style="color:#24292E;">] </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// [ 1, 2, &lt;2 empty items&gt;, 5 ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 通过直接设置 .length 拉长一个数组：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">d</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#24292E;">d.</span><span style="color:#005CC5;">length</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">5</span><span style="color:#24292E;"> </span><span style="color:#6A737D;">// [ 1, 2, &lt;3 empty items&gt; ]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A737D;">// 删除一个元素：</span></span>
<span class="line"><span style="color:#D73A49;">const</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">e</span><span style="color:#24292E;"> </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#005CC5;">1</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">2</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">3</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">4</span><span style="color:#24292E;">, </span><span style="color:#005CC5;">5</span><span style="color:#24292E;">]</span></span>
<span class="line"><span style="color:#D73A49;">delete</span><span style="color:#24292E;"> e[</span><span style="color:#005CC5;">2</span><span style="color:#24292E;">] </span><span style="color:#6A737D;">// [ 1, 2, &lt;1 empty item&gt;, 4, 5 ]</span></span></code></pre></div><p>数组方法在稀疏数组中的行为并不相同。 在遍历多个元素的方法中，下面的方法在访问索引之前执行 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/in" target="_blank" rel="noreferrer">in</a> 检查，并且不将空槽与 undefined 合并：</p><ul><li>concat()</li><li>copyWithin()</li><li>every()</li><li>filter()</li><li>flat()</li><li>flatMap()</li><li>forEach()</li><li>indexOf()</li><li>lastIndexOf()</li><li>map()</li><li>reduce()</li><li>reduceRight()</li><li>reverse()</li><li>slice()</li><li>some()</li><li>sort()</li><li>splice()</li></ul><p>这些方法将空槽视为 undefined：</p><ul><li>entries()</li><li>fill()</li><li>find()</li><li>findIndex()</li><li>findLast()</li><li>findLastIndex()</li><li>group() 实验性</li><li>groupToMap() 实验性</li><li>includes()</li><li>join()</li><li>keys()</li><li>toLocaleString()</li><li>values()</li></ul><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>由于稀疏数组的操作不同一，强烈不推荐创建和使用稀疏数组。</p></div><h2 id="类数组对象" tabindex="-1">类数组对象 <a class="header-anchor" href="#类数组对象" aria-label="Permalink to &quot;类数组对象&quot;">​</a></h2><p>具有 length 属性，并且索引元素的范围在 0 到 length - 1 之间的对象。如果它没有所有的索引，它将在功能上等同于<a href="#稀疏数组">稀疏数组</a>。</p><p>常见的类数组对象有：</p><ol><li>Dom 对象，例如<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/NodeList" target="_blank" rel="noreferrer">NodeList</a>、<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/HTMLCollection" target="_blank" rel="noreferrer">HTMLCollection</a>;</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Functions/arguments" target="_blank" rel="noreferrer">arguments</a>对象</li></ol><p>它们本身没有数组的方法，但是可以显示的为它们调用数组方法：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">function</span><span style="color:#E1E4E8;"> </span><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">() {</span></span>
<span class="line"><span style="color:#E1E4E8;">  console.</span><span style="color:#B392F0;">log</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.join.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;+&#39;</span><span style="color:#E1E4E8;">))</span></span>
<span class="line"><span style="color:#E1E4E8;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#B392F0;">f</span><span style="color:#E1E4E8;">(</span><span style="color:#9ECBFF;">&#39;a&#39;</span><span style="color:#E1E4E8;">, </span><span style="color:#9ECBFF;">&#39;b&#39;</span><span style="color:#E1E4E8;">) </span><span style="color:#6A737D;">// &#39;a+b&#39;</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">function</span><span style="color:#24292E;"> </span><span style="color:#6F42C1;">f</span><span style="color:#24292E;">() {</span></span>
<span class="line"><span style="color:#24292E;">  console.</span><span style="color:#6F42C1;">log</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.join.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;+&#39;</span><span style="color:#24292E;">))</span></span>
<span class="line"><span style="color:#24292E;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6F42C1;">f</span><span style="color:#24292E;">(</span><span style="color:#032F62;">&#39;a&#39;</span><span style="color:#24292E;">, </span><span style="color:#032F62;">&#39;b&#39;</span><span style="color:#24292E;">) </span><span style="color:#6A737D;">// &#39;a+b&#39;</span></span></code></pre></div><p>类数组转化为数组的几种方法：</p><ol><li>slice<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> </span><span style="color:#79B8FF;">Array</span><span style="color:#E1E4E8;">.</span><span style="color:#79B8FF;">prototype</span><span style="color:#E1E4E8;">.slice.</span><span style="color:#B392F0;">call</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> </span><span style="color:#005CC5;">Array</span><span style="color:#24292E;">.</span><span style="color:#005CC5;">prototype</span><span style="color:#24292E;">.slice.</span><span style="color:#6F42C1;">call</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span></code></pre></div></li><li>Array.from()<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> Array.</span><span style="color:#B392F0;">from</span><span style="color:#E1E4E8;">(</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">)</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> Array.</span><span style="color:#6F42C1;">from</span><span style="color:#24292E;">(</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">)</span></span></code></pre></div></li><li>扩展运算符<div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#F97583;">let</span><span style="color:#E1E4E8;"> arr </span><span style="color:#F97583;">=</span><span style="color:#E1E4E8;"> [</span><span style="color:#F97583;">...</span><span style="color:#79B8FF;">arguments</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#D73A49;">let</span><span style="color:#24292E;"> arr </span><span style="color:#D73A49;">=</span><span style="color:#24292E;"> [</span><span style="color:#D73A49;">...</span><span style="color:#005CC5;">arguments</span><span style="color:#24292E;">]</span></span></code></pre></div></li></ol>`,48),p=[e];function r(t,c,y,i,E,d){return a(),l("div",null,p)}const f=s(o,[["render",r]]);export{A as __pageData,f as default};
