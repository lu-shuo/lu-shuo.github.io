import{_ as e,o as a,c as n,Q as s}from"./chunks/framework.9bc09dc8.js";const m=JSON.parse('{"title":"Package.json 字段说明","description":"","frontmatter":{},"headers":[],"relativePath":"front-end/tools/npm/1.package.json说明.md","filePath":"front-end/tools/npm/1.package.json说明.md","lastUpdated":1697100813000}'),o={name:"front-end/tools/npm/1.package.json说明.md"},t=s(`<h1 id="package-json-字段说明" tabindex="-1">Package.json 字段说明 <a class="header-anchor" href="#package-json-字段说明" aria-label="Permalink to &quot;Package.json 字段说明&quot;">​</a></h1><h2 id="basics" tabindex="-1">Basics <a class="header-anchor" href="#basics" aria-label="Permalink to &quot;Basics&quot;">​</a></h2><h3 id="name" tabindex="-1">name <a class="header-anchor" href="#name" aria-label="Permalink to &quot;name&quot;">​</a></h3><p>我认为 name 属性不需要解释。如果没有这个必填字段，包将无法正常工作。在命名新软件包时，只有一些规则是必须遵守的:</p><ul><li>当发布到 npm 时，需保证包名的唯一性;</li><li>如果你有适当的 NPM 组织注册，你可以使用所谓的作用域，例如@Organization/package;</li><li>名称的字符长度包括作用域在内不应大于 214 个字符;</li><li>不能以大写字母和下划线(_)或点(.)开头;</li><li>只能使用 URL 安全的字符-你的包名很可能被其他人在终端中键入，并在 NPM 页面中作为 URL 使用;</li></ul><h3 id="version" tabindex="-1">version <a class="header-anchor" href="#version" aria-label="Permalink to &quot;version&quot;">​</a></h3><p>这也是包的基本字段，它与 name 一起构成包的唯一 id。在新版本发布时必须更改 version 字段。另外，您的版本字符串应该可以通过 node-semver 解析，这意味着它应该具有某种可预测的结构。通常，它以 3 个数字的形式出现，用点(.)分隔例如 0.0.0。在这之后，可以跟一标签(例如 next，beta，alpha)，还可以在标签后再跟数字，例如 0.0.0-next.0。当然，您不应该删除任何您认为合适的新版本(特别是当您的软件包被其他人使用时)。这就是为什么要创建像<a href="https://semver.org/lang/zh-CN/" target="_blank" rel="noreferrer">语义版本控制</a>这样的版本控制指导原则。</p><h2 id="information" tabindex="-1">Information <a class="header-anchor" href="#information" aria-label="Permalink to &quot;Information&quot;">​</a></h2><h3 id="description" tabindex="-1">description <a class="header-anchor" href="#description" aria-label="Permalink to &quot;description&quot;">​</a></h3><p>用来向用户提供一些关于软件包的信息。它将显示在 NPM 网站包列表中。当然，仅有 description 是不够的，通常我们使用 README 文件来提供包的详细说明，它将展示在 NPM 包首页。</p><h3 id="keywords" tabindex="-1">keywords <a class="header-anchor" href="#keywords" aria-label="Permalink to &quot;keywords&quot;">​</a></h3><p>一个关键词数组，它能改善包的“SEO”，当用户搜索需要的包时让我们的包排名靠前。</p><h3 id="license" tabindex="-1">license <a class="header-anchor" href="#license" aria-label="Permalink to &quot;license&quot;">​</a></h3><p><code>license</code>是一个简单但却非常重要的字段。正是这个字符串让您的用户知道您共享代码的条件。字符串必须是 <a href="https://spdx.org/licenses/" target="_blank" rel="noreferrer">SPDX 标识符</a>之一(短格式) ，如 MIT、 GPL-3.0 等。如果您还不知道什么样的许可证最适合您，可以考虑查看<a href="https://spdx.org/licenses/" target="_blank" rel="noreferrer">这个网站</a>，在这里您可以快速理解并选择最好的许可证(包括 SPDX 标识符!)。稍后将您的许可证选择的实际文本放在项目的根目录 LICENSE.md 文件中是一个很好的方案。</p><h3 id="homepage" tabindex="-1">homepage <a class="header-anchor" href="#homepage" aria-label="Permalink to &quot;homepage&quot;">​</a></h3><p>如果你的包有一个漂亮的主页，可以用此字段告诉用户，它将展示在 NPM 包主页和其他关联的地方。</p><h3 id="repository" tabindex="-1">repository <a class="header-anchor" href="#repository" aria-label="Permalink to &quot;repository&quot;">​</a></h3><p>如果您在 NPM 上公开发布您的软件包，那么它很可能是某种开源软件。因此，关于实际源代码仓库位置的信息可能会派上用场。<code>repository</code>字段可以做到这一点！有两种方法可以设置它——一个有 2 或 3 个属性的对象，即 type (存储库类型，如“ git”或“ svn”)、 URL (存储库的 URL)和 repo 中的可选目录(如果是 monorepo)。另一种可能的形式是字符串(也可以用来直接安装来自仓库的软件包) ，格式为“ Provider: user/repo”(其中提供者可以是“github”、“gitlab”或“ bitbucket”)或“ gist: id”(仅适用于 Gists)。</p><h3 id="bugs" tabindex="-1">bugs <a class="header-anchor" href="#bugs" aria-label="Permalink to &quot;bugs&quot;">​</a></h3><p>通常应该指向存储库的 issue 页面或可以报告这些问题的任何其他地方。</p><h3 id="author" tabindex="-1">author <a class="header-anchor" href="#author" aria-label="Permalink to &quot;author&quot;">​</a></h3><p>标注第一创造者。此字段可以有两种可能的值类型: 对象或字符串。该对象可以有 3 个属性-名称，电子邮件和网址(为作者的网站)。不同的、更短的格式是字符串版本，带有预定义的格式(与对象相比)-“ name &lt; email &gt; (url)”。这些不同的括号是必需的，但并非所有括号都需要提供。你可以省略例如(url) ，只提供姓名和电子邮件。</p><h3 id="contributors" tabindex="-1">contributors <a class="header-anchor" href="#contributors" aria-label="Permalink to &quot;contributors&quot;">​</a></h3><p>除了作者之外，贡献者也同样重要。<code>contributors</code>字段用来标注项目的贡献者，它和<code>author</code>字段接受一样的选项规则。另一个有趣的特性是，您可以在项目的根目录中提供适当的 AUTHORS.md 文件，在这里，将逐行提供项目的贡献者(采用前面提到的字符串格式)。这将在以后用作贡献者的默认值。</p><h2 id="files" tabindex="-1">Files <a class="header-anchor" href="#files" aria-label="Permalink to &quot;Files&quot;">​</a></h2><h3 id="files-1" tabindex="-1">files <a class="header-anchor" href="#files-1" aria-label="Permalink to &quot;files&quot;">​</a></h3><p>通常在最后产出的包中我们只希望包含部分文件，有两种方式可以实现此需求：</p><ul><li>设置 package.json 的 file 字段，它是一个字符串数组，可以包含单独的文件，目录和通配符</li><li>在项目中提供一个<code>.npmignore</code>文件（类似.gitignore），包含要忽略的文件或文件夹</li></ul><p>当然，一些文件是一定会被包含（e.g. README.md or LICENSE.md）或忽略的（e.g. node_modules or .git）。</p><h3 id="main" tabindex="-1">main <a class="header-anchor" href="#main" aria-label="Permalink to &quot;main&quot;">​</a></h3><p>标识包的入口文件，无论 files 的设置如何，入口文件都将被包含在最终产物中。</p><h3 id="browser" tabindex="-1">browser <a class="header-anchor" href="#browser" aria-label="Permalink to &quot;browser&quot;">​</a></h3><h3 id="unpkg" tabindex="-1">unpkg <a class="header-anchor" href="#unpkg" aria-label="Permalink to &quot;unpkg&quot;">​</a></h3><blockquote><p>非官方字段</p></blockquote><p>当通过省略的 url 访问 unpkg 的某个包时会使用此字段拼接对应的文件路径：</p><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki github-dark vp-code-dark"><code><span class="line"><span style="color:#79B8FF;font-weight:bold;"># [</span><span style="color:#DBEDFF;text-decoration:underline;">latestVersion</span><span style="color:#79B8FF;font-weight:bold;">] 指最新版本号，pkg 指 package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;font-weight:bold;"># 定义了 unpkg 属性时</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">https://unpkg.com/jquery@[</span><span style="color:#DBEDFF;text-decoration:underline;">latestVersion</span><span style="color:#E1E4E8;">]/[</span><span style="color:#DBEDFF;text-decoration:underline;">pkg.unpkg</span><span style="color:#E1E4E8;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#79B8FF;font-weight:bold;"># 未定义 unpkg 属性时，将回退到 main 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#E1E4E8;">https://unpkg.com/jquery@[</span><span style="color:#DBEDFF;text-decoration:underline;">latestVersion</span><span style="color:#E1E4E8;">]/[</span><span style="color:#DBEDFF;text-decoration:underline;">pkg.main</span><span style="color:#E1E4E8;">]</span></span></code></pre><pre class="shiki github-light vp-code-light"><code><span class="line"><span style="color:#005CC5;font-weight:bold;"># [</span><span style="color:#032F62;text-decoration:underline;">latestVersion</span><span style="color:#005CC5;font-weight:bold;">] 指最新版本号，pkg 指 package.json</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;"># 定义了 unpkg 属性时</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">https://unpkg.com/jquery@[</span><span style="color:#032F62;text-decoration:underline;">latestVersion</span><span style="color:#24292E;">]/[</span><span style="color:#032F62;text-decoration:underline;">pkg.unpkg</span><span style="color:#24292E;">]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#005CC5;font-weight:bold;"># 未定义 unpkg 属性时，将回退到 main 属性</span></span>
<span class="line"></span>
<span class="line"><span style="color:#24292E;">https://unpkg.com/jquery@[</span><span style="color:#032F62;text-decoration:underline;">latestVersion</span><span style="color:#24292E;">]/[</span><span style="color:#032F62;text-decoration:underline;">pkg.main</span><span style="color:#24292E;">]</span></span></code></pre></div><h3 id="module" tabindex="-1">module <a class="header-anchor" href="#module" aria-label="Permalink to &quot;module&quot;">​</a></h3><p>esModule 的入口文件</p><h3 id="types" tabindex="-1">types <a class="header-anchor" href="#types" aria-label="Permalink to &quot;types&quot;">​</a></h3><p>ts 类型声明文件</p><h3 id="bin" tabindex="-1">bin <a class="header-anchor" href="#bin" aria-label="Permalink to &quot;bin&quot;">​</a></h3><p>如果包是可执行文件，则必须包含此字段。它应该指向可执行文件的路径或者为一个对象形式，对象的键为命令名，值为可执行文件路径。</p><h2 id="tasks" tabindex="-1">Tasks <a class="header-anchor" href="#tasks" aria-label="Permalink to &quot;Tasks&quot;">​</a></h2><h3 id="scripts" tabindex="-1">scripts <a class="header-anchor" href="#scripts" aria-label="Permalink to &quot;scripts&quot;">​</a></h3><p>可执行脚本。</p><h2 id="dependencies" tabindex="-1">Dependencies <a class="header-anchor" href="#dependencies" aria-label="Permalink to &quot;Dependencies&quot;">​</a></h2><h3 id="dependencies-1" tabindex="-1">dependencies <a class="header-anchor" href="#dependencies-1" aria-label="Permalink to &quot;dependencies&quot;">​</a></h3><p>包依赖，<code>npm install</code>或者<code>yarn add</code>会安装此项目下的依赖，打包项目时， dependencies 中的包会被打包进去。</p><h3 id="devdependencies" tabindex="-1">devDependencies <a class="header-anchor" href="#devdependencies" aria-label="Permalink to &quot;devDependencies&quot;">​</a></h3><p>开发依赖，通过 <code>—save-dev or —dev</code> 安装的依赖，放在 devDependencies 目录下。这部分依赖在开发阶段用于框架、模块测试或者编译代码，再打包时不会被打包进去。当用户使用我们上传后的包时，也不会安装这部分依赖，比如 vue 的所有依赖都是放在该字段下的。</p><h3 id="peerdependencies" tabindex="-1">peerDependencies <a class="header-anchor" href="#peerdependencies" aria-label="Permalink to &quot;peerDependencies&quot;">​</a></h3><p>指定一些兼容性依赖。这些依赖在开发或者打包过程中不会被引入，默认在用户的使用环境中已经安装这些依赖。</p><h2 id="platform" tabindex="-1">Platform <a class="header-anchor" href="#platform" aria-label="Permalink to &quot;Platform&quot;">​</a></h2><h3 id="engines" tabindex="-1">engines <a class="header-anchor" href="#engines" aria-label="Permalink to &quot;engines&quot;">​</a></h3><p>指示包运行环境，常用来指示node，npm版本。</p><h3 id="os" tabindex="-1">os <a class="header-anchor" href="#os" aria-label="Permalink to &quot;os&quot;">​</a></h3><p>指定操作系统类型。</p><h2 id="publishing" tabindex="-1">Publishing <a class="header-anchor" href="#publishing" aria-label="Permalink to &quot;Publishing&quot;">​</a></h2><h3 id="private" tabindex="-1">private <a class="header-anchor" href="#private" aria-label="Permalink to &quot;private&quot;">​</a></h3><p>设置包为私有，当private为<code>true</code>时，当前包将不会被上传至npm，即使手误执行了发布操作。</p><h2 id="参考文章" tabindex="-1">参考文章 <a class="header-anchor" href="#参考文章" aria-label="Permalink to &quot;参考文章&quot;">​</a></h2><p><a href="https://areknawo.com/whats-what-package-json-cheatsheet/" target="_blank" rel="noreferrer">What&#39;s what? - Package.json cheatsheet!</a></p>`,62),r=[t];function i(l,p,d,c,h,u){return a(),n("div",null,r)}const k=e(o,[["render",i]]);export{m as __pageData,k as default};
